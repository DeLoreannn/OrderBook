@page "/"
@rendermode @(new InteractiveServerRenderMode(false))
@using OrderBook.Domain.Entities
@using OrderBook.Responses
@using OrderBook.Services
@using System.Globalization
@using static OrderBook.Services.BitstampService
@inject BitstampService BitstampService

<h3>Order Book</h3>

<Chart Config="_config" @ref="_chart" Height="400px"></Chart>

<div>
    <label for="btcAmount">Enter BTC Amount:</label>
    <input id="btcAmount" type="number" @bind="btcAmount" step="0.01" min="0" max="100" />
    <p>Price: @btcQuote EUR</p>
</div>

@code {
    private BarChartConfig? _config;
    private Chart? _chart;

    private OrderBookUpdate orderBook = new OrderBookUpdate() { Bids = new List<OrderBookItem>(), Asks = new List<OrderBookItem>() };

    private decimal btcAmount = 0;
    private decimal btcQuote = 0;

    private const string GreenBackgroundColor = "rgb(75, 192, 192)";
    private const string RedBackgroundColor = "rgb(255, 99, 132)";

    private async void UpdatePrice(OrderBookUpdate orderBook)
    {
        this.orderBook = orderBook;

        CalculatePrice();

        DefineChartConfig();

        await InvokeAsync(StateHasChanged);
    }

    private void CalculatePrice()
    {
        if (btcAmount <= 0 || orderBook.Asks == null || !orderBook.Asks.Any())
        {
            btcQuote = 0;
            return;
        }

        decimal remainingAmount = btcAmount;
        decimal totalCost = 0;

        foreach (var ask in orderBook.Asks)
        {
            decimal askAmount = ask.Amount ?? 0;
            decimal askPrice = ask.Price ?? 0;

            if (remainingAmount <= askAmount)
            {
                totalCost += remainingAmount * askPrice;
                break;
            }
            else
            {
                totalCost += askAmount * askPrice;
                remainingAmount -= askAmount;
            }
        }

        btcQuote = totalCost;
    }

    private void DefineChartConfig()
    {
        _config = new BarChartConfig()
        {
            Options = new Options()
            {
                Responsive = true,
                MaintainAspectRatio = false,
                Plugins = new Plugins()
                {
                    Legend = new Legend()
                    {
                        Align = Align.Center,
                        Display = false,
                        Position = LegendPosition.Right
                    }
                },
                Scales = new Dictionary<string, Axis>()
                {
                    {
                        Scales.XAxisId, new Axis()
                        {
                            Stacked = true,
                            Ticks = new Ticks()
                            {
                                MaxRotation = 0,
                                MinRotation = 0,
                            },

                        }
                    },
                    {
                        Scales.YAxisId, new Axis()
                        {
                            Stacked = true
                        }
                    }
                }
            }
        };

        _config.Data.Labels = orderBook.Bids.Select(b => b.Price.ToString()).Concat(orderBook.Asks.Select(a => a.Price.ToString())).ToList();

        _config.Data.Datasets.Add(new BarDataset()
        {
            Label = "Value",
            Data = orderBook.Bids.Select(b => b.Amount).Concat(orderBook.Asks.Select(a => a.Amount)).ToList(),
            BackgroundColor = orderBook.Bids.Select(p => GreenBackgroundColor).Concat(orderBook.Asks.Select(p => RedBackgroundColor)).ToList(),
            BorderColor = orderBook.Bids.Select(p => GreenBackgroundColor).Concat(orderBook.Asks.Select(prop => RedBackgroundColor)).ToList(),
            BorderWidth = 1,

        });
    }

    public void Dispose()
    {
        BitstampService.OnOrderBookUpdated -= UpdatePrice;
        BitstampService.StopFetchingOrderBook();
    }

    protected override async Task OnInitializedAsync()
    {
        BitstampService.OnOrderBookUpdated += UpdatePrice;
        BitstampService.StartFetchingOrderBook();
        DefineChartConfig();
    }
}